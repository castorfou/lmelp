#!/usr/bin/env python3
"""
Page de d√©monstration du composant BookAutocomplete.

Cette page permet de tester le composant en situation r√©elle
avec l'interface Streamlit compl√®te.
"""

import streamlit as st
import sys
from pathlib import Path

# Configuration de la page
st.set_page_config(page_title="D√©mo Book Autocomplete", page_icon="üìö", layout="wide")

# Ajout des paths n√©cessaires
ui_components_path = Path(__file__).parent.parent / "components"
nbs_path = Path(__file__).parent.parent.parent / "nbs"

if str(ui_components_path) not in sys.path:
    sys.path.insert(0, str(ui_components_path))
if str(nbs_path) not in sys.path:
    sys.path.insert(0, str(nbs_path))

from book_autocomplete import (
    BookAutocompleteConfig,
    BookAutocompleteComponent,
    render_book_autocomplete,
    render_book_autocomplete_with_episodes,
)


def main():
    """Page principale de d√©monstration"""
    st.title("üìö D√©monstration du composant Book Autocomplete")
    st.markdown("---")

    # Section 1: Composant simple
    st.header("1. Composant simple")
    st.write("Recherche basique avec configuration par d√©faut")

    try:
        selected = render_book_autocomplete(
            key="demo_simple", label="Rechercher un livre ou auteur (simple)"
        )

        if selected:
            st.success(f"S√©lectionn√©: **{selected.livre}** par *{selected.auteur}*")
    except Exception as e:
        st.error(f"Erreur composant simple: {e}")

    st.markdown("---")

    # Section 2: Composant avec configuration personnalis√©e
    st.header("2. Composant avec configuration personnalis√©e")
    st.write("Recherche avec configuration adapt√©e")

    # Configuration personnalis√©e
    custom_config = BookAutocompleteConfig(
        min_chars=2,
        max_suggestions=5,
        placeholder="Tapez 2 caract√®res minimum...",
        help_text="Recherche personnalis√©e avec seuil de 2 caract√®res",
        fuzzy_threshold=80,
        show_episodes_count=False,
        enable_clear_button=True,
    )

    try:
        selected_custom = render_book_autocomplete(
            config=custom_config,
            key="demo_custom",
            label="Rechercher avec configuration personnalis√©e",
        )

        if selected_custom:
            st.success(
                f"S√©lectionn√© (custom): **{selected_custom.livre}** par *{selected_custom.auteur}*"
            )
    except Exception as e:
        st.error(f"Erreur composant custom: {e}")

    st.markdown("---")

    # Section 3: Composant avec √©pisodes
    st.header("3. Composant avec affichage automatique des √©pisodes")
    st.write("Recherche avec affichage imm√©diat des √©pisodes correspondants")

    try:
        selected_episodes, episodes = render_book_autocomplete_with_episodes(
            key="demo_episodes", label="Rechercher avec affichage des √©pisodes"
        )

        if selected_episodes and episodes:
            st.success(
                f"Trouv√© **{len(episodes)}** √©pisode(s) pour **{selected_episodes.livre}**"
            )
    except Exception as e:
        st.error(f"Erreur composant avec √©pisodes: {e}")

    st.markdown("---")

    # Section 4: Tests manuels
    st.header("4. Zone de tests manuels")

    with st.expander("üß™ Tests sugg√©r√©s", expanded=False):
        st.markdown(
            """
        **Tests de fonctionnalit√© :**
        - Tapez moins de 3 caract√®res ‚Üí message d'info
        - Tapez un terme inexistant ‚Üí message "aucun r√©sultat"
        - Tapez un terme valide ‚Üí liste de suggestions
        - S√©lectionnez une suggestion ‚Üí affichage d√©taill√©
        
        **Tests d'erreur :**
        - Test de performance avec de longues requ√™tes
        - Test de r√©sistance aux caract√®res sp√©ciaux
        - Test du bouton clear (üóëÔ∏è)
        
        **Exemples de recherche :**
        - "Hugo" (auteur)
        - "Harry Potter" (livre)
        - "1984" (titre)
        - "roman" (terme g√©n√©rique)
        """
        )

    # Section informations techniques
    with st.expander("‚ÑπÔ∏è Informations techniques", expanded=False):
        st.markdown(
            """
        **Composant :** `BookAutocompleteComponent`
        **Moteur de recherche :** `AvisSearchEngine` 
        **Base de donn√©es :** MongoDB collection `episode_livres`
        **Algorithme fuzzy :** thefuzz avec token_set_ratio
        **Cache :** Streamlit @st.cache_data activ√©
        
        **Configuration par d√©faut :**
        - Minimum de caract√®res : 3
        - Suggestions maximum : 10
        - Seuil fuzzy : 70%
        - Bouton clear : activ√©
        - Affichage info : activ√©
        """
        )


if __name__ == "__main__":
    main()
