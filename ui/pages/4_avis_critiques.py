import streamlit as st
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).resolve().parent.parent))
from ui_tools import add_to_sys_path

add_to_sys_path()

st.set_page_config(
    page_title="le masque et la plume - avis critiques",
    page_icon=":material/rate_review:",
    layout="wide",
    initial_sidebar_state="auto",
)

from mongo_episode import Episodes, Episode
from llm import get_azure_llm
from mongo import get_collection
import pandas as pd
import locale
import re
from datetime import datetime
from bson import ObjectId

# D√©finir la locale en fran√ßais
locale.setlocale(locale.LC_TIME, "fr_FR.UTF-8")

st.title("üìù Avis Critiques")
st.write("G√©n√©rez des r√©sum√©s d'avis critiques √† partir des transcriptions d'√©pisodes")

# Afficher la date actuelle pour les captures d'√©cran
from datetime import datetime

current_date = datetime.now().strftime("%d %B %Y")
st.caption(f"üìÖ {current_date}")


DATE_FORMAT = "%d %b %Y"


def get_summary_from_cache(episode_oid):
    """R√©cup√®re un r√©sum√© existant depuis MongoDB"""
    try:
        collection = get_collection(collection_name="avis_critiques")
        cached_summary = collection.find_one({"episode_oid": episode_oid})
        return cached_summary
    except Exception as e:
        st.error(f"Erreur lors de la r√©cup√©ration du cache: {str(e)}")
        return None


def is_summary_truncated(summary_text):
    """V√©rifie si un r√©sum√© semble tronqu√© et ne devrait pas √™tre sauvegard√©"""
    if not summary_text or isinstance(summary_text, str) and summary_text.strip() == "":
        return True

    # V√©rifier si c'est le message d'erreur pour r√©sum√© tronqu√©
    if "R√©ponse de l'IA tronqu√©e. Veuillez r√©essayer." in summary_text:
        return True

    # V√©rifier la longueur minimale (r√©duite car un r√©sum√© avec un seul livre peut √™tre court)
    if len(summary_text) < 200:
        return True

    # V√©rifier les fins brutales typiques de troncature (mais pas le pipe seul qui peut √™tre normal)
    if (
        summary_text.endswith("**")
        or summary_text.endswith("‚Üí")
        or summary_text.endswith("...")
    ):
        return True

    # V√©rifier qu'il y a au moins un titre de section
    if "## 1." not in summary_text:
        return True

    # V√©rifier que le r√©sum√© se termine correctement (pas au milieu d'un tableau)
    lines = summary_text.strip().split("\n")
    last_non_empty_line = ""
    for line in reversed(lines):
        if line.strip():
            last_non_empty_line = line.strip()
            break

    # Si la derni√®re ligne est une ligne de tableau incompl√®te (moins de 3 pipes OU juste des pipes sans contenu)
    if last_non_empty_line.startswith("|"):
        # Compter les segments entre les pipes
        segments = last_non_empty_line.split("|")
        # Filtrer les segments vides (au d√©but et √† la fin)
        non_empty_segments = [seg.strip() for seg in segments if seg.strip()]

        # Si il y a moins de 2 colonnes avec du contenu, c'est probablement tronqu√©
        if len(non_empty_segments) < 2:
            return True

        # Si la ligne se termine bizarrement (par exemple juste "|" ou "| |")
        if last_non_empty_line.strip() in ["|", "| |", "||"]:
            return True

    return False


def debug_truncation_detection(summary_text):
    """Fonction de d√©bogage pour comprendre pourquoi un r√©sum√© est consid√©r√© comme tronqu√©"""
    debug_info = []

    if not summary_text or isinstance(summary_text, str) and summary_text.strip() == "":
        debug_info.append("‚ùå R√©sum√© vide ou None")
        return debug_info

    debug_info.append(f"üìè Longueur: {len(summary_text)} caract√®res")

    # V√©rifier le message d'erreur
    if "R√©ponse de l'IA tronqu√©e. Veuillez r√©essayer." in summary_text:
        debug_info.append("‚ùå Contient le message d'erreur de troncature")

    # V√©rifier la longueur minimale
    if len(summary_text) < 200:
        debug_info.append("‚ùå Trop court (< 200 caract√®res)")
    else:
        debug_info.append("‚úÖ Longueur suffisante")

    # V√©rifier les fins brutales
    endings = []
    if summary_text.endswith("**"):
        endings.append("**")
    if summary_text.endswith("‚Üí"):
        endings.append("‚Üí")
    if summary_text.endswith("..."):
        endings.append("...")

    if endings:
        debug_info.append(f"‚ùå Se termine par: {', '.join(endings)}")
    else:
        debug_info.append("‚úÖ Fin normale")

    # V√©rifier la structure
    if "## 1." not in summary_text:
        debug_info.append("‚ùå Pas de titre de section '## 1.'")
    else:
        debug_info.append("‚úÖ Contient un titre de section")

    # Analyser la derni√®re ligne
    lines = summary_text.strip().split("\n")
    last_non_empty_line = ""
    for line in reversed(lines):
        if line.strip():
            last_non_empty_line = line.strip()
            break

    debug_info.append(f"üîç Derni√®re ligne: '{last_non_empty_line[:100]}...'")

    if last_non_empty_line.startswith("|"):
        segments = last_non_empty_line.split("|")
        non_empty_segments = [seg.strip() for seg in segments if seg.strip()]
        debug_info.append(f"üìä Segments du tableau: {len(non_empty_segments)} colonnes")

        if len(non_empty_segments) < 2:
            debug_info.append("‚ùå Tableau incomplet (< 2 colonnes)")
        else:
            debug_info.append("‚úÖ Tableau semble complet")

        if last_non_empty_line.strip() in ["|", "| |", "||"]:
            debug_info.append("‚ùå Ligne de tableau vide/malform√©e")
    else:
        debug_info.append("‚úÖ Ne se termine pas par une ligne de tableau")

    return debug_info


def save_summary_to_cache(episode_oid, episode_title, episode_date, summary):
    """Sauvegarde un r√©sum√© dans MongoDB seulement s'il n'est pas tronqu√©"""
    try:
        # V√©rifier si le r√©sum√© est tronqu√© avant de le sauvegarder
        if is_summary_truncated(summary):
            st.warning(
                "‚ö†Ô∏è R√©sum√© tronqu√© d√©tect√© - sauvegarde annul√©e pour pr√©server la qualit√© des donn√©es"
            )

            # Afficher les d√©tails de d√©bogage
            debug_info = debug_truncation_detection(summary)
            with st.expander("üîç D√©tails de la d√©tection (cliquez pour d√©boguer)"):
                for info in debug_info:
                    st.write(info)

            st.info(
                "üí° Le r√©sum√© ne sera pas sauvegard√© dans la base de donn√©es. R√©essayez pour obtenir un r√©sum√© complet."
            )
            return False

        collection = get_collection(collection_name="avis_critiques")

        # Supprimer l'ancien r√©sum√© s'il existe
        collection.delete_one({"episode_oid": episode_oid})

        # Ins√©rer le nouveau r√©sum√©
        summary_doc = {
            "episode_oid": episode_oid,
            "episode_title": episode_title,
            "episode_date": episode_date,
            "summary": summary,
            "created_at": datetime.now(),
            "updated_at": datetime.now(),
        }

        collection.insert_one(summary_doc)
        st.success("‚úÖ R√©sum√© complet sauvegard√© dans le cache!")
        return True

    except Exception as e:
        st.error(f"Erreur lors de la sauvegarde du cache: {str(e)}")
        return False


@st.cache_data
def get_episodes_with_transcriptions():
    """R√©cup√®re tous les √©pisodes et filtre ceux qui ont des transcriptions"""
    episodes = Episodes()
    episodes.get_entries()
    all_episodes = [Episode.from_oid(oid) for oid in episodes.oid_episodes]
    episodes_df = pd.DataFrame([episode.to_dict() for episode in all_episodes])
    episodes_df["duree (min)"] = (episodes_df["duree"] / 60).round(1)

    # Ajouter les OIDs comme colonne
    episodes_df["oid"] = episodes.oid_episodes

    # Filtrer seulement les √©pisodes avec transcriptions
    episodes_with_transcriptions = episodes_df[
        episodes_df["transcription"].notna()
    ].copy()

    return episodes_with_transcriptions


def check_existing_summaries(episodes_df):
    """V√©rifie quels √©pisodes ont d√©j√† des r√©sum√©s d'avis critiques"""
    try:
        collection = get_collection(collection_name="avis_critiques")

        # R√©cup√©rer tous les OIDs d'√©pisodes qui ont des r√©sum√©s
        existing_summaries = collection.find({}, {"episode_oid": 1})
        existing_oids = {summary["episode_oid"] for summary in existing_summaries}

        # Ajouter une colonne pour indiquer si un r√©sum√© existe
        episodes_df_copy = episodes_df.copy()
        episodes_df_copy["has_critique_summary"] = (
            episodes_df_copy["oid"].astype(str).isin(existing_oids)
        )

        return episodes_df_copy

    except Exception as e:
        st.warning(f"Impossible de v√©rifier les r√©sum√©s existants: {str(e)}")
        # En cas d'erreur, cr√©er une colonne avec False partout
        episodes_df_copy = episodes_df.copy()
        episodes_df_copy["has_critique_summary"] = False
        return episodes_df_copy


def afficher_selection_episode():
    """Affiche la s√©lection d'√©pisode similaire √† la page episodes"""
    episodes_df = get_episodes_with_transcriptions()

    if episodes_df.empty:
        st.warning("Aucun √©pisode avec transcription disponible")
        st.info(
            "Veuillez d'abord g√©n√©rer des transcriptions pour les √©pisodes sur la page d'accueil"
        )
        return None

    # V√©rifier quels √©pisodes ont d√©j√† des r√©sum√©s (toujours en temps r√©el)
    episodes_df = check_existing_summaries(episodes_df)

    # Pr√©parer les donn√©es pour la s√©lection
    episodes_df = episodes_df.copy()

    # Trier par date d√©croissante AVANT de convertir en string
    episodes_df = episodes_df.sort_values("date", ascending=False)

    episodes_df["date"] = episodes_df["date"].apply(lambda x: x.strftime(DATE_FORMAT))

    # Ajouter des indicateurs visuels dans le s√©lecteur
    def format_episode_selector(row):
        base_text = f"{row['date']} - {row['titre'][:100]}"
        if row["has_critique_summary"]:
            return f"üü¢ {base_text}"  # Ic√¥ne verte pour indiquer qu'un r√©sum√© existe
        else:
            return (
                f"‚ö™ {base_text}"  # Ic√¥ne grise pour indiquer qu'aucun r√©sum√© n'existe
            )

    episodes_df["selecteur"] = episodes_df.apply(format_episode_selector, axis=1)

    # Afficher un r√©sum√© des statistiques
    total_episodes = len(episodes_df)
    episodes_with_summaries = episodes_df["has_critique_summary"].sum()
    episodes_without_summaries = total_episodes - episodes_with_summaries

    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("üìö Total √©pisodes", total_episodes)
    with col2:
        st.metric("üü¢ Avec r√©sum√©", episodes_with_summaries)
    with col3:
        st.metric("‚ö™ Sans r√©sum√©", episodes_without_summaries)

    # L√©gende pour les ic√¥nes
    st.caption("üü¢ = R√©sum√© d'avis critiques disponible | ‚ö™ = R√©sum√© √† g√©n√©rer")

    # Navigation et s√©lection d'√©pisode avec alignement vertical
    col_nav1, col_nav2, col_nav3 = st.columns([1, 4, 1])

    # Initialiser l'index s√©lectionn√© dans le session state
    if "selected_episode_index" not in st.session_state:
        st.session_state.selected_episode_index = 0

    # S√©lecteur d'√©pisode (colonne centrale)
    with col_nav2:
        # S'assurer que l'index est dans les limites
        if st.session_state.selected_episode_index >= len(episodes_df):
            st.session_state.selected_episode_index = 0

        selected = st.selectbox(
            "S√©lectionnez un √©pisode",
            episodes_df["selecteur"],
            index=st.session_state.selected_episode_index,
            key="episode_selector",
        )

        # Mettre √† jour l'index si l'utilisateur change la s√©lection
        current_index = episodes_df[episodes_df["selecteur"] == selected].index[0]
        actual_index = episodes_df.index.get_loc(current_index)
        if actual_index != st.session_state.selected_episode_index:
            st.session_state.selected_episode_index = actual_index

    # Boutons de navigation align√©s verticalement avec la selectbox
    with col_nav1:
        # Petit espace pour aligner avec le label de la selectbox
        st.write("")
        if st.button(
            "‚¨ÖÔ∏è Pr√©c√©dent",
            disabled=(st.session_state.selected_episode_index >= len(episodes_df) - 1),
            use_container_width=True,
            key="prev_btn",
        ):
            st.session_state.selected_episode_index = min(
                len(episodes_df) - 1, st.session_state.selected_episode_index + 1
            )
            st.rerun()

    with col_nav3:
        # Petit espace pour aligner avec le label de la selectbox
        st.write("")
        if st.button(
            "Suivant ‚û°Ô∏è",
            disabled=(st.session_state.selected_episode_index == 0),
            use_container_width=True,
            key="next_btn",
        ):
            st.session_state.selected_episode_index = max(
                0, st.session_state.selected_episode_index - 1
            )
            st.rerun()

    # Filtrer le DataFrame pour trouver la ligne correspondant √† la s√©lection
    episode = episodes_df[episodes_df["selecteur"] == selected]

    if not episode.empty:
        episode = episode.iloc[0]

        # Afficher le titre avec un indicateur visuel
        if episode["has_critique_summary"]:
            st.write(f"### üü¢ {episode['titre']}")
            st.success("‚úÖ Un r√©sum√© d'avis critiques existe d√©j√† pour cet √©pisode")
        else:
            st.write(f"### ‚ö™ {episode['titre']}")
            st.info(
                "üí° Aucun r√©sum√© d'avis critiques pour cet √©pisode - vous pouvez en g√©n√©rer un"
            )

        st.write(f"**Date**: {episode['date']}")
        st.write(f"**Dur√©e**: {episode['duree (min)']} minutes")
        st.write(f"**Description**: {episode['description']}")

        # R√©cup√©rer l'OID de l'√©pisode pour le cache
        episode_oid = str(episode["oid"])

        # V√©rifier si un r√©sum√© existe d√©j√† dans le cache
        cached_summary = get_summary_from_cache(episode_oid)

        # Bouton pour reg√©n√©rer le r√©sum√© (affich√© en premier si un r√©sum√© existe)
        regenerate_clicked = False
        if cached_summary:
            regenerate_clicked = st.button("üîÑ Reg√©n√©rer le r√©sum√©", type="secondary")

        # Bouton pour g√©n√©rer le r√©sum√© (affich√© si pas de r√©sum√© en cache)
        generate_clicked = False
        if not cached_summary:
            generate_clicked = st.button(
                "‚ú® G√©n√©rer le r√©sum√© des avis critiques", type="primary"
            )

        # Traitement des clics de boutons
        if regenerate_clicked or generate_clicked:
            # Cr√©er un container pour le statut
            status_container = st.container()

            with status_container:
                progress_bar = st.progress(0)
                status_text = st.empty()

                try:
                    transcription = episode["transcription"]
                    if not transcription:
                        st.error(
                            "La transcription n'est pas disponible pour cet √©pisode"
                        )
                    else:
                        # √âtape 1: Pr√©paration
                        progress_bar.progress(10)
                        status_text.text("üìù Pr√©paration de la transcription...")

                        # √âtape 2: G√©n√©ration
                        progress_bar.progress(30)
                        status_text.text("ü§ñ G√©n√©ration du r√©sum√© avec l'IA...")

                        # G√©n√©ration du r√©sum√© avec la date de l'√©pisode
                        summary = generate_critique_summary(
                            transcription, episode["date"]
                        )

                        # √âtape 3: Sauvegarde
                        progress_bar.progress(80)
                        status_text.text("üíæ Sauvegarde dans le cache...")

                        # Sauvegarde dans le cache seulement si le r√©sum√© n'est pas tronqu√©
                        save_success = save_summary_to_cache(
                            episode_oid, episode["titre"], episode["date"], summary
                        )

                        # √âtape 4: Finalisation
                        progress_bar.progress(100)
                        status_text.text("‚úÖ Termin√©!")

                        # Nettoyer les indicateurs de progression
                        progress_bar.empty()
                        status_text.empty()

                        # Affichage imm√©diat du nouveau r√©sum√©
                        if regenerate_clicked:
                            if save_success:
                                st.success(
                                    "‚úÖ R√©sum√© r√©g√©n√©r√© et sauvegard√© avec succ√®s!"
                                )
                            else:
                                st.warning(
                                    "‚ö†Ô∏è R√©sum√© r√©g√©n√©r√© mais non sauvegard√© (r√©sum√© incomplet)"
                                )
                        else:
                            if save_success:
                                st.success(
                                    "‚úÖ R√©sum√© g√©n√©r√© et sauvegard√© avec succ√®s!"
                                )
                            else:
                                st.warning(
                                    "‚ö†Ô∏è R√©sum√© g√©n√©r√© mais non sauvegard√© (r√©sum√© incomplet)"
                                )

                        st.subheader("üìä R√©sum√© des avis critiques")
                        st.markdown(summary, unsafe_allow_html=True)

                        # Message appropri√© selon le statut de sauvegarde
                        if save_success:
                            st.info(
                                "üí° R√©sum√© g√©n√©r√© avec succ√®s ! Rechargez la page (F5) pour voir la mise √† jour des indicateurs."
                            )
                        else:
                            st.warning(
                                "‚ö†Ô∏è R√©sum√© affich√© mais non sauvegard√© car il semble incomplet. R√©essayez pour obtenir un r√©sum√© complet qui sera sauvegard√©."
                            )

                except Exception as e:
                    # Nettoyer les indicateurs de progression en cas d'erreur
                    progress_bar.empty()
                    status_text.empty()

                    st.error(f"Erreur lors de la g√©n√©ration du r√©sum√©: {str(e)}")
                    st.info(
                        "V√©rifiez que la cl√© API Azure OpenAI est correctement configur√©e dans votre fichier .env"
                    )

                    # Afficher plus de d√©tails sur l'erreur si c'est un timeout
                    if "timeout" in str(e).lower():
                        st.warning(
                            "‚è∞ La g√©n√©ration a pris trop de temps. Essayez de nouveau ou contactez l'administrateur."
                        )
                    elif "rate limit" in str(e).lower():
                        st.warning(
                            "üö¶ Limite de taux atteinte. Attendez quelques minutes avant de r√©essayer."
                        )
                    else:
                        st.error(f"D√©tails de l'erreur: {str(e)}")

                    # Bouton pour r√©essayer
                    if st.button("üîÑ R√©essayer", key="retry_button"):
                        st.rerun()

        # Afficher le r√©sum√© en cache uniquement si aucun bouton n'a √©t√© cliqu√©
        elif cached_summary:
            st.info(
                f"üìÑ R√©sum√© existant (g√©n√©r√© le {cached_summary['created_at'].strftime('%d %B %Y √† %H:%M')})"
            )
            st.subheader("üìä R√©sum√© des avis critiques")
            st.markdown(cached_summary["summary"], unsafe_allow_html=True)
    else:
        st.write("Aucun √©pisode trouv√© pour cette s√©lection.")

    return episode if not episode.empty else None


def post_process_and_sort_summary(summary_text, episode_date=None):
    """Post-traite le r√©sum√© pour corriger le tri des notes, supprimer les phrases explicatives et ajouter la date"""
    import re

    # Formater la date pour l'insertion dans les titres
    date_str = ""
    if episode_date:
        if isinstance(episode_date, str):
            date_str = f" du {episode_date}"
        else:
            date_str = f" du {episode_date.strftime('%d %B %Y')}"

    # Supprimer diverses phrases explicatives que l'IA pourrait g√©n√©rer
    phrases_to_remove = [
        "Les livres discut√©s au programme principal sont class√©s par note d√©croissante, avec des avis d√©taill√©s et des notes attribu√©es par chaque critique. Les coups de c≈ìur personnels sont √©galement class√©s par note d√©croissante, avec des commentaires sur les raisons de leur recommandation.",
        "Les livres sont class√©s par note d√©croissante.",
        "Voici l'analyse de la transcription",
        "En r√©sum√©,",
        "Voici les tableaux demand√©s",
        "Analyse de l'√©mission",
        "D'apr√®s la transcription",
        "Bas√© sur la transcription fournie",
        "Voici l'analyse des avis critiques",
    ]

    for phrase in phrases_to_remove:
        summary_text = summary_text.replace(phrase, "")

    # Supprimer les phrases introductives g√©n√©riques avec regex
    summary_text = re.sub(r"^.*[Vv]oici.*\n", "", summary_text, flags=re.MULTILINE)
    summary_text = re.sub(r"^.*[Aa]nalyse.*\n", "", summary_text, flags=re.MULTILINE)
    summary_text = re.sub(r"^.*[Dd]\'apr√®s.*\n", "", summary_text, flags=re.MULTILINE)
    summary_text = re.sub(r"^.*[Bb]as√© sur.*\n", "", summary_text, flags=re.MULTILINE)

    # NOUVEAU: Forcer l'ajout de la date dans les titres des tableaux si elle n'y est pas
    if date_str:
        # Ajouter la date au titre du programme principal si elle n'y est pas d√©j√†
        summary_text = re.sub(
            r"(## 1\. LIVRES DISCUT√âS AU PROGRAMME)(?! du)",
            r"\1" + date_str,
            summary_text,
        )

        # Ajouter la date au titre des coups de c≈ìur si elle n'y est pas d√©j√†
        summary_text = re.sub(
            r"(## 2\. COUPS DE C[≈íO]EUR DES CRITIQUES)(?! du)",
            r"\1" + date_str,
            summary_text,
        )

    # Nettoyer les lignes vides multiples
    summary_text = re.sub(r"\n\s*\n", "\n\n", summary_text)
    summary_text = summary_text.strip()

    # S'assurer que le texte commence par un titre de section
    if not summary_text.startswith("##"):
        # Chercher le premier titre de section et commencer √† partir de l√†
        lines = summary_text.split("\n")
        for i, line in enumerate(lines):
            if line.strip().startswith("## 1."):
                summary_text = "\n".join(lines[i:])
                break

    # Si le r√©sum√© ne contient pas de tableaux avec des notes, le retourner tel quel
    if not re.search(r"<span[^>]*>(\d+\.?\d*)</span>", summary_text):
        return summary_text

    lines = summary_text.split("\n")
    result_lines = []

    # Variables pour capturer les tableaux
    in_main_table = False
    in_coups_table = False
    main_table_lines = []
    coups_table_lines = []
    header_line = None
    separator_line = None

    for line in lines:
        # D√©tecter le d√©but du tableau principal
        if "1. LIVRES DISCUT√âS AU PROGRAMME" in line:
            in_main_table = True
            in_coups_table = False
            result_lines.append(line)
            continue

        # D√©tecter le d√©but du tableau coups de c≈ìur
        if (
            "2. COUPS DE COEUR DES CRITIQUES" in line
            or "2. COUPS DE C≈íUR DES CRITIQUES" in line
        ):
            in_main_table = False
            in_coups_table = True

            # Traiter le tableau principal avant de passer au suivant
            if main_table_lines:
                sorted_main = sort_table_by_rating(
                    main_table_lines, header_line, separator_line
                )
                result_lines.extend(sorted_main)
                main_table_lines = []
                header_line = None
                separator_line = None

            result_lines.append(line)
            continue

        # Si on est dans un tableau
        if in_main_table or in_coups_table:
            # D√©tecter l'en-t√™te du tableau (contient "Auteur" et "Titre")
            if "Auteur" in line and "Titre" in line and not header_line:
                header_line = line
                continue

            # D√©tecter la ligne de s√©paration (contient des tirets)
            elif "---" in line or "|-" in line:
                separator_line = line
                continue

            # Si c'est une ligne de donn√©es du tableau (contient des notes color√©es OU des donn√©es)
            elif re.search(r"<span[^>]*>(\d+\.?\d*)</span>", line) or (
                "|" in line and line.strip() != ""
            ):
                if in_main_table:
                    main_table_lines.append(line)
                else:
                    coups_table_lines.append(line)
                continue

        # Pour toutes les autres lignes, les ajouter directement
        result_lines.append(line)

    # Traiter le dernier tableau (coups de c≈ìur) si il existe
    if coups_table_lines:
        sorted_coups = sort_table_by_rating(
            coups_table_lines, header_line, separator_line
        )
        result_lines.extend(sorted_coups)

    return "\n".join(result_lines)


def sort_table_by_rating(table_lines, header_line, separator_line):
    """Trie les lignes d'un tableau par note d√©croissante"""
    import re
    import re

    # S√©parer les lignes avec notes de celles sans notes
    lines_with_ratings = []
    lines_without_ratings = []

    for line in table_lines:
        # Chercher la note dans les spans HTML
        rating_match = re.search(r"<span[^>]*>(\d+\.?\d*)</span>", line)
        if rating_match:
            rating = float(rating_match.group(1))
            lines_with_ratings.append((rating, line))
        else:
            lines_without_ratings.append(line)

    # Trier par note d√©croissante seulement les lignes avec notes
    lines_with_ratings.sort(key=lambda x: x[0], reverse=True)

    # Reconstruire le tableau
    result = []
    if header_line:
        result.append("")  # Ligne vide avant le tableau
        result.append(header_line)
    if separator_line:
        result.append(separator_line)

    # Ajouter d'abord les lignes tri√©es par note
    for rating, line in lines_with_ratings:
        result.append(line)

    # Puis ajouter les lignes sans notes (si il y en a)
    for line in lines_without_ratings:
        result.append(line)

    return result


def generate_critique_summary(transcription, episode_date=None):
    """G√©n√®re un r√©sum√© des avis critiques √† partir d'une transcription"""

    # V√©rifier que la transcription n'est pas vide ou trop courte
    if not transcription or len(transcription.strip()) < 100:
        raise ValueError(
            "La transcription est trop courte ou vide pour g√©n√©rer un r√©sum√©"
        )

    # Limiter la taille de la transcription si elle est trop longue
    max_chars = 100000  # Augmentation de la limite pour capturer les coups de c≈ìur en fin d'√©mission
    if len(transcription) > max_chars:
        transcription = transcription[:max_chars] + "... [transcription tronqu√©e]"
        st.warning(
            f"‚ö†Ô∏è Transcription tronqu√©e √† {max_chars} caract√®res pour √©viter les timeouts"
        )

    # V√©rifier si la transcription contient des mots-cl√©s li√©s aux livres
    book_keywords = [
        "livre",
        "auteur",
        "roman",
        "critique",
        "litt√©rature",
        "publication",
        "√©dition",
        "√©diteur",
    ]
    transcription_lower = transcription.lower()
    keyword_count = sum(
        1 for keyword in book_keywords if keyword in transcription_lower
    )

    if keyword_count < 3:
        st.warning(
            "‚ö†Ô∏è Cette transcription ne semble pas contenir beaucoup de discussions sur les livres"
        )

    # Formater la date pour l'insertion dans les titres
    date_str = ""
    if episode_date:
        if isinstance(episode_date, str):
            date_str = f" du {episode_date}"
        else:
            date_str = f" du {episode_date.strftime('%d %B %Y')}"

    prompt = f"""
Tu es un expert en critique litt√©raire qui analyse la transcription de l'√©mission "Le Masque et la Plume" sur France Inter.

IMPORTANT: Si cette transcription ne contient PAS de discussions sur des livres, r√©ponds simplement:
"Aucun livre discut√© dans cet √©pisode. Cette √©mission semble porter sur d'autres sujets (cin√©ma, th√©√¢tre, musique)."

Voici la transcription:
{transcription}

CONSIGNE PRINCIPALE:
Identifie TOUS les livres discut√©s et cr√©e 2 tableaux d√©taill√©s et complets:

1. **LIVRES DU PROGRAMME PRINCIPAL**: Tous les livres qui font l'objet d'une discussion approfondie entre plusieurs critiques
2. **COUPS DE C≈íUR PERSONNELS**: UNIQUEMENT les livres mentionn√©s rapidement par un critique comme recommandation personnelle (diff√©rents du programme principal)

‚ö†Ô∏è CONSIGNE CRUCIALE: NE RETOURNE QUE LES DEUX TABLEAUX, SANS AUCUNE PHRASE D'EXPLICATION, SANS COMMENTAIRE, SANS PHRASE INTRODUCTIVE. COMMENCE DIRECTEMENT PAR "## 1. LIVRES DISCUT√âS AU PROGRAMME" et termine par le dernier tableau.

---

## 1. LIVRES DISCUT√âS AU PROGRAMME{date_str}

Format de tableau markdown OBLIGATOIRE avec HTML pour les couleurs:

| Auteur | Titre | √âditeur | Avis d√©taill√©s des critiques | Note moyenne | Nb critiques | Coup de c≈ìur | Chef d'≈ìuvre |
|--------|-------|---------|------------------------------|--------------|-------------|-------------|-------------|
| [Nom auteur] | [Titre livre] | [√âditeur] | **[Nom COMPLET critique 1]**: [avis d√©taill√© et note] <br>**[Nom COMPLET critique 2]**: [avis d√©taill√© et note] <br>**[Nom COMPLET critique 3]**: [avis d√©taill√© et note] | [Note color√©e] | [Nombre] | [Noms si note ‚â•9] | [Noms si note=10] |

‚ö†Ô∏è IMPORTANT: CLASSE LES LIVRES PAR NOTE D√âCROISSANTE (meilleure note d'abord, pire note en dernier).

R√àGLES DE NOTATION STRICTES:
- Note 1-2: Livres d√©test√©s, "purges", "ennuyeux", "rat√©"
- Note 3-4: Livres d√©cevants, "pas terrible", "probl√©matique"
- Note 5-6: Livres moyens, "correct sans plus", "mitig√©"
- Note 7-8: Bons livres, "plaisant", "r√©ussi", "bien √©crit"
- Note 9: Excellents livres, "formidable", "remarquable", "coup de c≈ìur"
- Note 10: Chefs-d'≈ìuvre, "g√©nial", "exceptionnel", "chef-d'≈ìuvre"

COULEURS HTML OBLIGATOIRES pour la Note moyenne:
- 9.0-10.0: <span style="background-color: #00C851; color: white; padding: 2px 6px; border-radius: 3px; font-weight: bold;">X.X</span>
- 8.0-8.9: <span style="background-color: #4CAF50; color: white; padding: 2px 6px; border-radius: 3px; font-weight: bold;">X.X</span>
- 7.0-7.9: <span style="background-color: #8BC34A; color: white; padding: 2px 6px; border-radius: 3px; font-weight: bold;">X.X</span>
- 6.0-6.9: <span style="background-color: #CDDC39; color: black; padding: 2px 6px; border-radius: 3px; font-weight: bold;">X.X</span>
- 5.0-5.9: <span style="background-color: #FFEB3B; color: black; padding: 2px 6px; border-radius: 3px; font-weight: bold;">X.X</span>
- 4.0-4.9: <span style="background-color: #FF9800; color: white; padding: 2px 6px; border-radius: 3px; font-weight: bold;">X.X</span>
- 3.0-3.9: <span style="background-color: #FF5722; color: white; padding: 2px 6px; border-radius: 3px; font-weight: bold;">X.X</span>
- 1.0-2.9: <span style="background-color: #F44336; color: white; padding: 2px 6px; border-radius: 3px; font-weight: bold;">X.X</span>

INSTRUCTIONS D√âTAILL√âES POUR EXTRAIRE TOUS LES AVIS:
1. Identifie TOUS les critiques qui parlent de chaque livre: J√©r√¥me Garcin, Elisabeth Philippe, Fr√©d√©ric Beigbeder, Michel Cr√©pu, Arnaud Viviant, Judith Perrignon, Xavier Leherpeur, Patricia Martin, etc.
2. Pour chaque critique, capture son NOM COMPLET (Pr√©nom + Nom) 
3. Cite leurs avis EXACTS avec leurs mots-cl√©s d'appr√©ciation
4. Attribue une note individuelle bas√©e sur leur vocabulaire (entre 1 et 10)
5. Calcule la moyenne arithm√©tique pr√©cise (ex: 7.3, 8.7)
6. Identifie les "coups de c≈ìur" (critiques tr√®s enthousiastes, note ‚â•9)
7. **CLASSE OBLIGATOIREMENT PAR NOTE D√âCROISSANTE** (meilleure note d'abord)

---

## 2. COUPS DE C≈íUR DES CRITIQUES{date_str}

‚ö†Ô∏è ATTENTION: Ce tableau contient UNIQUEMENT les livres/ouvrages mentionn√©s rapidement par les critiques comme recommandations personnelles suppl√©mentaires (souvent en fin d'√©mission avec "mon coup de c≈ìur", "je recommande", etc.). 
Ce sont des ouvrages DIFF√âRENTS de ceux discut√©s au programme principal ci-dessus.
INCLUT TOUS TYPES D'OUVRAGES : romans, essais, BD, guides, biographies, etc.

Format de tableau pour ces recommandations personnelles:

| Auteur | Titre | √âditeur | Critique | Note | Commentaire |
|--------|-------|---------|----------|------|-------------|
| [Nom] | [Titre] | [√âditeur] | [Nom COMPLET critique] | [Note color√©e] | [Raison du coup de c≈ìur] |

‚ö†Ô∏è IMPORTANT: 
- CLASSE LES COUPS DE C≈íUR PAR NOTE D√âCROISSANTE AUSSI
- N'INCLUS QUE les livres mentionn√©s comme recommandations PERSONNELLES, PAS ceux du programme principal
- CHERCHE SP√âCIALEMENT en fin de transcription les sections "coups de c≈ìur", "conseils de lecture", "recommandations"

EXIGENCES QUALIT√â:
- Noms COMPLETS de TOUS les critiques (Pr√©nom + Nom)
- Citations exactes des avis les plus marquants
- √âditeurs mentionn√©s quand disponibles
- Tableaux markdown parfaitement format√©s
- Couleurs HTML correctement appliqu√©es
- **CLASSEMENT OBLIGATOIRE PAR NOTE D√âCROISSANTE**
- Capture de TOUS les avis individuels (pas seulement Elisabeth Philippe)
- **RECHERCHE ACTIVE des coups de c≈ìur en fin de transcription** : cherche "coups de c≈ìur", "conseil de lecture", "je recommande", "mon choix"

‚ö†Ô∏è SP√âCIAL COUPS DE C≈íUR: Les critiques mentionnent souvent leurs recommandations personnelles vers la fin de l'√©mission. SCRUTE ATTENTIVEMENT la fin de la transcription pour ne pas les manquer !

‚ö†Ô∏è FORMAT DE R√âPONSE: Retourne UNIQUEMENT les 2 tableaux markdown avec leurs titres. N'ajoute AUCUNE explication, phrase introductive, ou commentaire sur la m√©thode de g√©n√©ration. Commence directement par "## 1. LIVRES DISCUT√âS AU PROGRAMME" et termine par le dernier tableau.

RAPPEL FINAL: NE RETOURNE AUCUN TEXTE EXPLICATIF AVANT OU APR√àS LES TABLEAUX. AUCUNE PHRASE COMME "voici l'analyse" ou "en r√©sum√©". COMMENCE IMM√âDIATEMENT PAR LE PREMIER TITRE DE TABLEAU.

Sois EXHAUSTIF et PR√âCIS. Capture TOUS les livres, TOUS les critiques, et TOUS les avis individuels."""

    try:
        # Utiliser Azure OpenAI avec timeout configur√© dans llm.py (300 secondes)
        model = get_azure_llm()
        st.info("üîß Utilisation du timeout Azure OpenAI (300 secondes / 5 minutes)")

        # Configurer les param√®tres pour obtenir une r√©ponse plus longue et d√©taill√©e
        response = model.complete(
            prompt,
            max_tokens=4000,  # Augmenter significativement la limite pour des r√©sum√©s d√©taill√©s
            temperature=0.1,  # R√©duire la cr√©ativit√© pour plus de coh√©rence
        )

        # DEBUG: Affichage de la r√©ponse brute pour le d√©bogage
        # D√©commentez les lignes ci-dessous si vous avez besoin de d√©boguer la g√©n√©ration :
        # - Pour voir la r√©ponse compl√®te de l'IA avant post-traitement
        # - Pour v√©rifier si la r√©ponse est tronqu√©e
        # - Pour analyser les probl√®mes de formatage ou de contenu

        # response_text = response.text.strip()
        # st.write("üîç **DEBUG - R√©ponse brute de l'IA:**")
        # st.code(response_text[:1000] + "..." if len(response_text) > 1000 else response_text, language="markdown")
        # st.write(f"üìä **Longueur de la r√©ponse:** {len(response_text)} caract√®res")

        response_text = response.text.strip()

        # V√©rifier si la r√©ponse semble tronqu√©e
        if (
            len(response_text) < 300
            or response_text.endswith("**")
            or response_text.endswith("‚Üí")
        ):
            st.error(
                "‚ö†Ô∏è La r√©ponse de l'IA semble tronqu√©e (trop courte ou se termine brutalement)"
            )
            st.info(
                "üí° Cela peut √™tre d√ª √† une limite de tokens. Essayez avec un √©pisode plus court ou r√©essayez."
            )
            return "R√©ponse de l'IA tronqu√©e. Veuillez r√©essayer."

        # V√©rifier si l'IA indique qu'aucun livre n'est discut√©
        if (
            "Aucun livre discut√©" in response_text
            or "porte sur d'autres sujets" in response_text
        ):
            st.warning("üìö Aucun livre discut√© dans cet √©pisode")
            return response_text

        # Le nouveau format n√©cessite un post-traitement pour corriger le tri
        st.info("üîÑ Correction automatique du tri par notes d√©croissantes...")
        sorted_summary = post_process_and_sort_summary(response_text, episode_date)

        st.info("‚úÖ R√©sum√© d√©taill√© g√©n√©r√© avec noms des critiques et avis individuels")
        return sorted_summary

    except Exception as e:
        error_msg = str(e).lower()
        st.error(f"Erreur lors de la g√©n√©ration avec l'IA: {str(e)}")

        # Ajouter plus de d√©tails sur l'erreur
        if "transcription est trop courte" in str(e):
            st.warning(
                "üìù La transcription est trop courte pour g√©n√©rer un r√©sum√© valide"
            )
        elif "timeout" in error_msg or "timed out" in error_msg:
            st.warning("‚è∞ Timeout: La g√©n√©ration a pris trop de temps (>300 secondes)")
            st.info("üí° Essayez avec un √©pisode plus court ou r√©essayez plus tard")
        elif "rate limit" in error_msg:
            st.warning(
                "üö¶ Limite de taux atteinte. Attendez quelques minutes avant de r√©essayer."
            )
        elif "invalid request" in error_msg:
            st.warning(
                "üìù Requ√™te invalide. La transcription est peut-√™tre trop longue."
            )
        elif "connection" in error_msg:
            st.warning("üåê Probl√®me de connexion. V√©rifiez votre connexion internet.")
        elif "unauthorized" in error_msg or "api key" in error_msg:
            st.warning(
                "üîë Probl√®me d'authentification. V√©rifiez votre cl√© API Azure OpenAI."
            )
        else:
            st.error(f"D√©tails techniques: {str(e)}")

        raise e


def debug_truncation_detection(summary_text):
    """Fonction de d√©bogage pour comprendre pourquoi un r√©sum√© est consid√©r√© comme tronqu√©"""
    debug_info = []

    if not summary_text or isinstance(summary_text, str) and summary_text.strip() == "":
        debug_info.append("‚ùå R√©sum√© vide ou None")
        return debug_info

    debug_info.append(f"üìè Longueur: {len(summary_text)} caract√®res")

    # V√©rifier le message d'erreur
    if "R√©ponse de l'IA tronqu√©e. Veuillez r√©essayer." in summary_text:
        debug_info.append("‚ùå Contient le message d'erreur de troncature")

    # V√©rifier la longueur minimale
    if len(summary_text) < 200:
        debug_info.append("‚ùå Trop court (< 200 caract√®res)")
    else:
        debug_info.append("‚úÖ Longueur suffisante")

    # V√©rifier les fins brutales
    endings = []
    if summary_text.endswith("**"):
        endings.append("**")
    if summary_text.endswith("‚Üí"):
        endings.append("‚Üí")
    if summary_text.endswith("..."):
        endings.append("...")

    if endings:
        debug_info.append(f"‚ùå Se termine par: {', '.join(endings)}")
    else:
        debug_info.append("‚úÖ Fin normale")

    # V√©rifier la structure
    if "## 1." not in summary_text:
        debug_info.append("‚ùå Pas de titre de section '## 1.'")
    else:
        debug_info.append("‚úÖ Contient un titre de section")

    # Analyser la derni√®re ligne
    lines = summary_text.strip().split("\n")
    last_non_empty_line = ""
    for line in reversed(lines):
        if line.strip():
            last_non_empty_line = line.strip()
            break

    debug_info.append(f"üîç Derni√®re ligne: '{last_non_empty_line[:100]}...'")

    if last_non_empty_line.startswith("|"):
        segments = last_non_empty_line.split("|")
        non_empty_segments = [seg.strip() for seg in segments if seg.strip()]
        debug_info.append(f"üìä Segments du tableau: {len(non_empty_segments)} colonnes")

        if len(non_empty_segments) < 2:
            debug_info.append("‚ùå Tableau incomplet (< 2 colonnes)")
        else:
            debug_info.append("‚úÖ Tableau semble complet")

        if last_non_empty_line.strip() in ["|", "| |", "||"]:
            debug_info.append("‚ùå Ligne de tableau vide/malform√©e")
    else:
        debug_info.append("‚úÖ Ne se termine pas par une ligne de tableau")

    return debug_info


# Interface principale
try:
    afficher_selection_episode()
except Exception as e:
    st.error(f"Erreur lors du chargement des √©pisodes: {str(e)}")
    st.info("V√©rifiez que la base de donn√©es MongoDB est accessible")
