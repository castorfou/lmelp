name: Tests Unitaires

# Déclencher sur push et pull request vers main et branches de développement
"on":
  push:
    branches: [ main, develop, "**devops**", "**test**" ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Tests et Coverage
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.12]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: sudo apt-get update && sudo apt-get install -y libdbus-1-dev pkg-config libglib2.0-dev

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt
        
    - name: Run tests avec coverage
      run: |
        python -m pytest tests/ --cov=nbs.config --cov-report=term-missing --cov-report=xml --cov-fail-under=90
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == 3.12
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Test infrastructure CI/CD (.env.test robustness)
      run: |
        # Tester depuis un autre répertoire pour valider robustesse CI/CD
        cd /tmp
        python -m pytest $GITHUB_WORKSPACE/tests/unit/test_fixtures.py::TestFixturesPackage::test_load_env_test_robustness_for_cicd -v
      env:
        PYTHONPATH: ${{ github.workspace }}
        
  lint:
    name: Linting (optionnel)
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
        
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        
    - name: Run flake8
      run: flake8 nbs/ tests/ --max-line-length=88 --extend-ignore=E203,W503
      continue-on-error: true
      
    - name: Check black formatting
      run: black --check nbs/ tests/
      continue-on-error: true
      
    - name: Check import sorting
      run: isort --check-only nbs/ tests/
      continue-on-error: true
