# AUTOGENERATED! DO NOT EDIT! File to edit: py mongo helper.ipynb.

# %% py mongo helper.ipynb 2
# to fix the forward reference issue by from_oid, get_entries in BaseEntity
from __future__ import annotations

from dotenv import load_dotenv, find_dotenv
import os


def load_env():
    _ = load_dotenv(find_dotenv())


def get_DB_VARS():
    load_env()
    DB_HOST = os.getenv("DB_HOST")
    DB_NAME = os.getenv("DB_NAME")
    DB_LOGS = os.getenv("DB_LOGS")
    return DB_HOST, DB_NAME, DB_LOGS


# %% auto 0
__all__ = [
    "load_env",
    "get_DB_VARS",
    "get_collection",
    "mongolog",
    "print_logs",
    "BaseEntity",
    "Auteur",
    "Editeur",
    "Critique",
]

# %% py mongo helper.ipynb 4
import pymongo


def get_collection(
    target_db="localhost", client_name="masque_et_la_plume", collection_name="episodes"
):
    """
    target_db can be 'localhost' or 'nas923'
    """
    client = pymongo.MongoClient(f"mongodb://{target_db}:27017/")
    db = client[client_name]
    collection = db[collection_name]
    return collection


# %% py mongo helper.ipynb 6
from datetime import datetime
import pymongo


def mongolog(operation: str, entite: str, desc: str):
    DB_HOST, DB_NAME, DB_LOGS = get_DB_VARS()
    if DB_LOGS in ["true", "True"]:
        coll_logs = get_collection(DB_HOST, DB_NAME, "logs")
        coll_logs.insert_one(
            {
                "operation": operation,
                "entite": entite,
                "desc": desc,
                "date": datetime.now(),
            }
        )


def print_logs(n: int = 10):
    """
    Print the last n logs
    """
    DB_HOST, DB_NAME, DB_LOGS = get_DB_VARS()
    coll_logs = get_collection(DB_HOST, DB_NAME, "logs")
    for i, log in enumerate(coll_logs.find().sort("date", pymongo.DESCENDING)):
        if i == n:
            break
        print(log)


# %% py mongo helper.ipynb 10
from bson import ObjectId
from typing import List


class BaseEntity:
    def __init__(self, nom: str, collection_name: str):
        """
        BaseEntity is a class that represents a generic entity in the database.
        :param nom: The name of the entity.
        :param collection_name: The name of the collection.
        """
        DB_HOST, DB_NAME, _ = get_DB_VARS()
        self.collection = get_collection(
            target_db=DB_HOST, client_name=DB_NAME, collection_name=collection_name
        )
        self.nom = nom

    def exists(self) -> bool:
        """
        Check if the entity exists in the database.
        :return: True if the entity exists, False otherwise.
        """
        return self.collection.find_one({"nom": self.nom}) is not None

    def keep(self):
        """
        Keep the entity in the database.
        """
        if not self.exists():
            mongolog("insert", self.collection.name, self.nom)
            self.collection.insert_one({"nom": self.nom})
        else:
            mongolog("update", self.collection.name, self.nom)

    def remove(self):
        """
        Remove the entity from the database.
        """
        self.collection.delete_one({"nom": self.nom})
        mongolog("delete", self.collection.name, self.nom)

    def get_oid(self) -> ObjectId:
        """
        Get the object id of the entity.
        :return: The object id of the entity. (bson.ObjectId)
        None if does not exist.
        """
        document = self.collection.find_one({"nom": self.nom})
        if document:
            return document["_id"]
        else:
            return None

    @classmethod
    def from_oid(cls, oid: ObjectId) -> cls:
        """
        Create an inherited BaseEntity from an oid of a mongo entry.
        :param oid: oid as ObjectId.
        :return: The inherited BaseEntity.
        """

        DB_HOST, DB_NAME, _ = get_DB_VARS()
        collection = get_collection(
            target_db=DB_HOST, client_name=DB_NAME, collection_name=cls.collection
        )

        document = collection.find_one({"_id": oid})

        inst = cls(nom=document.get("nom"))
        return inst

    @classmethod
    def get_entries(cls, request="") -> List[cls]:
        """'
        retourne le resultat de la requete sous forme d'une liste d'instance de inherited BaseEntity
        par exemple : request="part of name"
        """
        DB_HOST, DB_NAME, _ = get_DB_VARS()
        collection = get_collection(
            target_db=DB_HOST, client_name=DB_NAME, collection_name=cls.collection
        )
        query = {
            "nom": {
                "$regex": request,
                "$options": "i",  # "i" pour insensible Ã  la casse
            }
        }
        result = collection.find(query)
        list_baseentity = [cls.from_oid(entry.get("_id")) for entry in result]
        return list_baseentity

    def __repr__(self):
        return self.nom

    def __str__(self):
        return self.nom


# %% py mongo helper.ipynb 12
class Auteur(BaseEntity):
    collection = "auteurs"

    def __init__(self, nom: str):
        """
        Auteur is a class that represents an author in the database auteurs.
        :param nom: The name of the author.
        """
        super().__init__(nom, self.collection)


# %% py mongo helper.ipynb 17
class Editeur(BaseEntity):
    collection = "editeurs"

    def __init__(self, nom: str):
        """
        Editeur is a class that represents a publisher in the database editeurs.
        :param nom: The name of the publisher.
        """
        super().__init__(nom, self.collection)


# %% py mongo helper.ipynb 22
class Critique(BaseEntity):
    collection = "critiques"

    def __init__(self, nom: str):
        """
        Critique is a class that represents a "critique" in the database critiques.
        :param nom: The name of the "critique".
        """
        super().__init__(nom, self.collection)
