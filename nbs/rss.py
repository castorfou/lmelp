# AUTOGENERATED! DO NOT EDIT! File to edit: py rss helper.ipynb.

# %% auto 0
__all__ = [
    "RSS_DATE_FORMAT",
    "load_env",
    "get_RSS_URL",
    "extraire_dureesummary",
    "extraire_urls_rss",
    "Podcast",
]

# %% py rss helper.ipynb 2
from dotenv import load_dotenv, find_dotenv
import os


def load_env():
    _ = load_dotenv(find_dotenv())


def get_RSS_URL():
    load_env()
    RSS_LMELP_URL = os.getenv("RSS_LMELP_URL")
    if RSS_LMELP_URL is None:
        RSS_LMELP_URL = "https://radiofrance-podcast.net/podcast09/rss_14007.xml"
    return RSS_LMELP_URL


# %% py rss helper.ipynb 5
import feedparser
import re


def extraire_dureesummary(summary):
    """Extrait la durée d un episode du masque.
    Returns:
    Le nombre de secondes correspondant à la durée d'un episode.
    -1 si la durée n'est pas trouvée.
    """

    # Expression régulière pour extraire la durée
    pattern_duree = r"durée\s*:\s*(\d{2}:\d{2}:\d{2})"

    # Recherche de la durée dans le texte
    match = re.search(pattern_duree, summary)

    if match:
        duree_str = match.group(1)
        heures, minutes, secondes = map(int, duree_str.split(":"))
        return heures * 3600 + minutes * 60 + secondes
    else:
        return -1


def extraire_urls_rss(duree_mini_minutes=15):
    """Extrait les URLs des balises `enclosure` d'un flux RSS des episodes durant plus de duree_mini_minutes minutes

    Args:
      duree_mini_minutes: la duree mini en minutes des episodes du flux

    Returns:
      Une liste d'URLs.
    """

    url_flux = get_RSS_URL()

    flux = feedparser.parse(url_flux)
    urls = []
    for entree in flux.entries:
        for link in entree.links:
            if link.type == "audio/mpeg":
                if (
                    extraire_dureesummary(entree.summary) > duree_mini_minutes * 60
                ):  # 15 minutes
                    urls.append(link.href)
    return urls


# %% py rss helper.ipynb 8
import feedparser
from mongo import get_collection, get_DB_VARS
from datetime import datetime
from typing import List
from feedparser.util import FeedParserDict
from mongo_episode import RSS_episode
import pytz

RSS_DATE_FORMAT = "%a, %d %b %Y %H:%M:%S %z"  # "Sun, 29 Dec 2024 10:59:39 +0100"


class Podcast:
    def __init__(self):
        self.parsed_flow = feedparser.parse(get_RSS_URL())
        DB_HOST, DB_NAME, _ = get_DB_VARS()
        self.collection = get_collection(
            target_db=DB_HOST, client_name=DB_NAME, collection_name="episodes"
        )

    def get_most_recent_episode_from_DB(self) -> datetime:
        """
        on recupere la date la plus recente des episodes stockes
        """
        most_recent_document = self.collection.find().sort({"date": -1}).limit(1)
        # Extraire la date du document
        most_recent_date = None
        for doc in most_recent_document:
            most_recent_date = doc["date"].replace(tzinfo=pytz.timezone("Europe/Paris"))
        return most_recent_date

    def list_last_large_episodes(
        self, duree_mini_minutes: int = 15
    ) -> List[FeedParserDict]:
        """
        list RSS documents that are
        - newer than get_most_recent_episode_from_DB(self)
        - longer than duree_mini_minutes=15
        """
        last_large_episodes = []
        for entry in self.parsed_flow.entries:
            date_rss = datetime.strptime(entry.published, RSS_DATE_FORMAT)
            date_db = self.get_most_recent_episode_from_DB()
            if date_rss > date_db:
                if (
                    RSS_episode.get_duree_in_seconds(entry.itunes_duration)
                    > duree_mini_minutes * 60
                ):
                    last_large_episodes.append(entry)
        return last_large_episodes

    def store_last_large_episodes(self, duree_mini_minutes: int = 15):
        """
        loop through list_last_large_episodes
        instantiate RSS_episode and keep them
        """
        last_large_episodes = self.list_last_large_episodes(duree_mini_minutes)
        for entry in last_large_episodes:
            rss_entry = RSS_episode.from_feed_entry(entry)
            rss_entry.keep()
