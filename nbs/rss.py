# AUTOGENERATED! DO NOT EDIT! File to edit: py rss helper.ipynb.

# %% auto 0
__all__ = ["load_env", "get_RSS_URL", "extraire_dureesummary", "extraire_urls_rss"]

# %% py rss helper.ipynb 2
from dotenv import load_dotenv, find_dotenv
import os


def load_env():
    _ = load_dotenv(find_dotenv())


def get_RSS_URL():
    load_env()
    RSS_LMELP_URL = os.getenv("RSS_LMELP_URL")
    if RSS_LMELP_URL is None:
        RSS_LMELP_URL = "https://radiofrance-podcast.net/podcast09/rss_14007.xml"
    return RSS_LMELP_URL


# %% py rss helper.ipynb 5
import feedparser
import re


def extraire_dureesummary(summary):
    """Extrait la durée d un episode du masque.
    Returns:
    Le nombre de secondes correspondant à la durée d'un episode.
    -1 si la durée n'est pas trouvée.
    """

    # Expression régulière pour extraire la durée
    pattern_duree = r"durée\s*:\s*(\d{2}:\d{2}:\d{2})"

    # Recherche de la durée dans le texte
    match = re.search(pattern_duree, summary)

    if match:
        duree_str = match.group(1)
        heures, minutes, secondes = map(int, duree_str.split(":"))
        return heures * 3600 + minutes * 60 + secondes
    else:
        return -1


def extraire_urls_rss(duree_mini_minutes=15):
    """Extrait les URLs des balises `enclosure` d'un flux RSS des episodes durant plus de duree_mini_minutes minutes

    Args:
      duree_mini_minutes: la duree mini en minutes des episodes du flux

    Returns:
      Une liste d'URLs.
    """

    url_flux = get_RSS_URL()

    flux = feedparser.parse(url_flux)
    urls = []
    for entree in flux.entries:
        for link in entree.links:
            if link.type == "audio/mpeg":
                if (
                    extraire_dureesummary(entree.summary) > duree_mini_minutes * 60
                ):  # 15 minutes
                    urls.append(link.href)
    return urls
