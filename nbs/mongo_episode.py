# AUTOGENERATED! DO NOT EDIT! File to edit: py mongo helper episodes.ipynb.

# %% auto 0
__all__ = ["DATE_FORMAT", "Episode", "RSS_episode"]

# %% py mongo helper episodes.ipynb 3
from bson import ObjectId
from mongo import get_collection, get_DB_VARS, mongolog
from datetime import datetime

DATE_FORMAT = "%Y-%m-%dT%H:%M:%S.%f%z"


class Episode:
    def __init__(self, date: str, titre: str, collection_name: str = "episodes"):
        """
        Episode is a class that represents a generic Episode entity in the database.
        :param date: The date for this episode at the format "2024-12-22T09:59:39.000+00:00" parsed by "%Y-%m-%dT%H:%M:%S.%f%z".
        :param titre: The title of this episode.
        :param collection_name: The name of the collection. default: "episodes".
        """
        DB_HOST, DB_NAME, _ = get_DB_VARS()
        self.collection = get_collection(
            target_db=DB_HOST, client_name=DB_NAME, collection_name=collection_name
        )
        self.date = date
        self.titre = titre

    def exists(self) -> bool:
        """
        Check if the episode exists in the database.
        :return: True if the episode exists, False otherwise.
        """
        return (
            self.collection.find_one({"titre": self.titre, "date": self.date})
            is not None
        )

    def keep(self):
        """
        Keep the episode in the database.
        """
        if not self.exists():
            mongolog("insert", self.collection.name, f"{self.date} - {self.titre}")
            self.collection.insert_one({"titre": self.titre, "date": self.date})
        else:
            mongolog("update", self.collection.name, f"{self.date} - {self.titre}")

    def remove(self):
        """
        Remove the episode from the database.
        """
        self.collection.delete_one({"titre": self.titre, "date": self.date})
        mongolog("delete", self.collection.name, f"{self.date} - {self.titre}")

    def get_oid(self) -> ObjectId:
        """
        Get the object id of the episode.
        :return: The object id of the episode. (bson.ObjectId)
        None if does not exist.
        """
        document = self.collection.find_one({"titre": self.titre, "date": self.date})
        if document:
            return document["_id"]
        else:
            return None

    @staticmethod
    def get_date_from_string(date: str) -> datetime:
        """
        Get the datetime object from a string.
        :param date: The date string.
        :return: The datetime object.
        """
        return datetime.strptime(date, DATE_FORMAT)

    @staticmethod
    def get_string_from_date(date: datetime, format: str = None) -> str:
        """
        Get the string from a datetime object.
        :param date: The datetime object.
        :param format: The format of the string. default: None and DATE_FORMAT will be used.
        :return: The date string.
        """
        if format is not None:
            return date.strftime(format)
        else:
            return date.strftime(DATE_FORMAT)


# %% py mongo helper episodes.ipynb 5
class RSS_episode(Episode):
    def __init__(self, date: str, titre: str):
        """
        RSS_episode is a class that represents an RSS episode in the database episodes.
        :param date: The date for this episode at the format "2024-12-22T09:59:39.000+00:00" parsed by "%Y-%m-%dT%H:%M:%S.%f%z".
        :param titre: The title of this episode.
        """
        super().__init__(date, titre)
