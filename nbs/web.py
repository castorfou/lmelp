# AUTOGENERATED! DO NOT EDIT! File to edit: py web helper.ipynb.

# %% auto 0
__all__ = ["WebPage"]

# %% py web helper.ipynb 2
from bs4 import BeautifulSoup
from typing import List, Dict, Any
from config import get_WEB_filename


class WebPage:
    def __init__(self):
        """
        Initialize the WebPage object.

        This method reads the HTML content from the file specified by the
        `WEB_LMELP_FILENAME` environment variable, parses it using BeautifulSoup,
        and extracts information about the episodes.
        """
        file_path = get_WEB_filename()

        # Lire le contenu du fichier HTML
        with open(file_path, "r", encoding="utf-8") as file:
            html_content = file.read()

        # Analyser le contenu HTML avec BeautifulSoup
        soup = BeautifulSoup(html_content, "html.parser")

        # Extraire les informations des épisodes
        self.episodes: List[Dict[str, Any]] = []

        # Rechercher les éléments contenant les informations des épisodes
        for item in soup.find_all("li", class_="Collection-section-items-item"):
            title_element = item.find("span", class_="CardTitle")
            link_element = item.find("a", class_="underline-hover")
            description_element = item.find("div", class_="CardDescription")
            date_elements = item.find(
                "div", class_="DefaultDetails-secondLine"
            ).find_all("p")

            if (
                title_element
                and link_element
                and description_element
                and len(date_elements) >= 3
            ):
                title = title_element.get_text(strip=True)
                url = link_element["href"]
                description = description_element.get_text(strip=True)
                date = date_elements[0].get_text(strip=True)
                duration = date_elements[2].get_text(strip=True)

                self.episodes.append(
                    {
                        "title": title,
                        "url": url,
                        "description": description,
                        "date": date,
                        "duration": duration,
                    }
                )

    def __str__(self) -> str:
        """
        Return a string representation of the WebPage object.

        Returns:
            str: A string containing the details of all episodes.
        """
        output = ""
        for episode in self.episodes:
            output += f"""
Title: {episode['title']}
URL: {episode['url']}
Description: {episode['description']}
Date: {episode['date']}
Duration: {episode['duration']}

            """
        return output

    def __repr__(self) -> str:
        """
        Return a string representation of the WebPage object for debugging.

        Returns:
            str: A string containing the details of all episodes.
        """
        return self.__str__()

    def __getitem__(self, index: int) -> Dict[str, Any]:
        """
        Get an episode by its index.

        Args:
            index (int): The index of the episode to retrieve.

        Returns:
            dict: A dictionary containing the details of the episode.
        """
        return self.episodes[index]

    def __len__(self) -> int:
        """
        Get the number of episodes.

        Returns:
            int: The number of episodes.
        """
        return len(self.episodes)
