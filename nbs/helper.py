# AUTOGENERATED! DO NOT EDIT! File to edit: helper.ipynb.

# %% auto 0
__all__ = [
    "load_env",
    "get_gemini_api_key",
    "get_openai_api_key",
    "get_google_projectID",
    "get_gemini_llm",
    "get_gemini_llamaindex_llm",
    "get_vertex_llm",
]

# %% helper.ipynb 1
from dotenv import load_dotenv, find_dotenv
import os


def load_env():
    _ = load_dotenv(find_dotenv())


def get_gemini_api_key():
    load_env()
    gemini_api_key = os.getenv("GEMINI_API_KEY")
    return gemini_api_key


def get_openai_api_key():
    load_env()
    openai_api_key = os.getenv("OPENAI_API_KEY")
    return openai_api_key


def get_google_projectID():
    load_env()
    google_projectID = os.getenv("GOOGLE_PROJECT_ID")
    return google_projectID


# %% helper.ipynb 4
import google.generativeai as genai


def get_gemini_llm(model="gemini-1.5-flash"):
    genai.configure(api_key=get_gemini_api_key())
    llm = genai.GenerativeModel(model)
    return llm


# %% helper.ipynb 7
from llama_index.llms.gemini import Gemini
from llama_index.core import Settings


def get_gemini_llamaindex_llm(model="models/gemini-1.5-flash"):
    genai.configure(api_key=get_gemini_api_key())
    llm = Gemini(model=model, api_key=get_gemini_api_key())
    Settings.llm = llm
    return llm


# %% helper.ipynb 10
from llama_index.core import Settings
from llama_index.llms.vertex import Vertex


def get_vertex_llm(model="models/gemini-1.5-flash"):

    # Set up necessary variables
    credentials = {
        "project_id": get_google_projectID(),
        "api_key": get_gemini_api_key(),
    }

    # Create an instance of the Vertex class
    llm = Vertex(
        model=model,
        project=credentials["project_id"],
        credentials=credentials,
        context_window=4096,
    )
    Settings.llm = llm
    return llm
